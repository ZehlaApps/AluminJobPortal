@inject JobListingService jobListingService
@inject JobApplicationService joApplicationService
@inject SignInManager<JobProfile> signInManager
@inject UserManager<JobProfile> userManager

@namespace JobPortal.Components

<div class="text-center" style="margin-top: 50px;">
    <h1 class="display-6 py-5">Explore by category</h1>

    <div class="sector-container">
      <div class="card shadow sector-card" @onclick="() => SelectSectorAsync(sectors[0])">
          <img src="/img/sectors/finance.png" class="rounded border-1 p-2" />
          <h4 class="text-muted">Accountancy and finance</h4>
      </div>
      <div class="card shadow sector-card" @onclick="() => SelectSectorAsync(sectors[1])">
          <img src="/img/sectors/it.png" class="rounded border-1 p-2" />
          <h4 class="text-muted">Information technology</h4>
      </div>
      <div class="card shadow sector-card" @onclick="() => SelectSectorAsync(sectors[2])">
          <img src="/img/sectors/social-media.png" class="rounded border-1 p-2" />
          <h4 class="text-muted">Media and internet</h4>
      </div>
      <div class="card shadow sector-card" @onclick="() => SelectSectorAsync(sectors[3])">
          <img src="/img/sectors/manufacturing.png" class="rounded border-1 p-2" />
          <h4 class="text-muted">Engineering and manufactring</h4>
      </div>
    </div>
</div>


<div class="text-center">
    <h1 class="display-6 py-5">Find a perfect job for you</h1>

    <div class="input-group mb-3">
      <select class="form-control form-control-lg" @onchange="(e) => SelectSectorAsync(e.Value.ToString())">
                    <option>Accountancy and finance</option>
                    <option>Business and consulting</option>
                    <option>Charity and voluntary</option>
                    <option>Creative arts and design</option>
                    <option>Energy and utilities</option>
                    <option>Engineering and manufactring</option>
                    <option>Environment and agriculture</option>
                    <option>Healthcare</option>
                    <option>Hospitality and events</option>
                    <option>Information technology</option>
                    <option>Law</option>
                    <option>Law enforcement</option>
                    <option>Media and internet</option>
                    <option>Property and construction</option>
                    <option>Recruitment and HR</option>
                    <option>Retail</option>
                    <option>Sales</option>
                    <option>Science and pharmaceuticals</option>
                    <option>Education</option>
                    <option>Transport and logistics</option>
      </select>
      <input style="width: 40%" class="form-control form-control-lg" list="datalistOptions" value="@SearchString" @onchange="SearchJobs"
            aria-describedby="search-button" />
        <button class="btn btn-success" type="submit" id="search-button">
            <span class="oi oi-magnifying-glass"></span>
        </button>
    </div>
</div>

<div class="my-3 text-center text-muted">
    @if (String.IsNullOrEmpty(SearchString))
    {
        <div class="mt-3 d-flex justify-content-center">
            <lottie-player src="https://assets1.lottiefiles.com/private_files/lf30_KTzaOr.json" background="transparent"
            speed="1" style="width: 300px; height: 300px;" loop autoplay>
            </lottie-player>
        </div>
    }
    else
    {
        <p>@jobListings.Count() results found</p>
    }
</div>


@if (loading)
{
    <Loader />
}
else
{
    foreach (var job in jobListings)
    {
        if (signInManager.IsSignedIn(principal))
        {

            <JobSearchResult job="@job" user="@principal"
    jobApplied="joApplicationService.CheckJobApplication(userManager.GetUserId(principal), job.Id)" />
        }
        else
        {
            <JobSearchResult job="@job" />
        }
    }
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IEnumerable<JobListing> jobListings = new List<JobListing>();
    private Dictionary<string, bool> verificationStatus = new Dictionary<string, bool>();

    private ClaimsPrincipal principal;
    private string SearchString;
    private bool loading = false;

    private List<String> sectors = new List<String>
    {
      "Accountancy and finance",
      "Information technology",
      "Media and internet",
      "Engineering and manufactring"
    };

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        principal = (await authenticationStateTask).User;
        loading = false;
    }

    private async Task SearchJobs(ChangeEventArgs args)
    {
        loading = true;
        SearchString = args.Value.ToString();

        if (!string.IsNullOrEmpty(SearchString))
        {
            jobListings = await jobListingService.SearchJobListingsAsync(SearchString);
        }
        loading = false;
    }

    private async Task SelectSectorAsync(string sector)
    {
        loading = true;
        SearchString = sector;

        if (!string.IsNullOrEmpty(SearchString))
        {
            jobListings = await jobListingService.SearchJobListingsAsync(SearchString);
        }

        loading = false;
    }
}
