@inject JobListingService jobListingService
@inject JobApplicationService joApplicationService
@inject SignInManager<JobProfile> signInManager
@inject UserManager<JobProfile> userManager

@namespace JobPortal.Components

<div class="text-center mt-4">
    <div class="sector-container">
        @foreach (var sectorName in sectors)
        {
            var sectorImg = $"img/sectors/{sectorName.ToLower()}.png";
            var sectorSearch = $"{sectorName}";

            <div class="card shadow sector-card" @onclick="() => SelectSectorAsync(sectorSearch)">
                <img src="@sectorImg" class="rounded border-1 p-2" />
                <h4 class="text-muted">@sectorName Sector</h4>
            </div>
        }
    </div>
</div>

<div class="text-center">
    <h1 class="display-6 py-4">Find a perfect job for you</h1>

    <div class="input-group mb-3">
        <input class="form-control form-control-lg" list="datalistOptions" value="@SearchString" @onchange="SearchJobs"
            aria-describedby="search-button" />
        <button class="btn btn-success" type="submit" id="search-button">
            <span class="oi oi-magnifying-glass"></span>
        </button>
    </div>
</div>

<div class="my-3 text-center text-muted">
    @if (String.IsNullOrEmpty(SearchString))
    {
        <div class="mt-3 d-flex justify-content-center">
            <lottie-player src="https://assets1.lottiefiles.com/private_files/lf30_KTzaOr.json" background="transparent"
            speed="1" style="width: 300px; height: 300px;" loop autoplay>
            </lottie-player>
        </div>
    }
    else
    {
        <p>@jobListings.Count() results found</p>
    }
</div>

<div class="cover-card">
    <div class="cover2">
        <div class="text">
            <h2 style="margin-bottom:20px;">Video Job Ads: Our top picks</h2>
            <p style="margin-bottom: 30px;">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eum consequatur
                quae fugiat vel maxime, dolor
                error eius id ad incidunt provident accusantium cupiditate dolore sed perferendis quas nostrum </p>
            <div style="display:flex;margin:5px;">
                <img src="img/right-arrow.png" alt="" style="height: 25px;margin-right:10px;">
                <h5>Resume Assesments</h5>
            </div>
            <div style="display:flex;margin:5px;">
                <img src="img/right-arrow.png" alt="" style="height: 25px;margin-right:10px;">
                <h5>Job Fit Scoring</h5>
            </div>
            <div style="display:flex;margin:5px;">
                <img src="img/right-arrow.png" alt="" style="height: 25px;margin-right:10px;">
                <h5>Unlimited Job Posts</h5>
            </div>
        </div>
        <video width="420" height="340" controls style="z-index: 1;position:relative;top:20px;">
            <source src="video/stock-video.mp4" type="video/mp4">
            Your browser does not support the video tag.
        </video>
        <div class="random-circle"></div>
    </div>
</div>

@if (loading)
{
    <Loader />
}
else
{
    foreach (var job in jobListings)
    {
        if (signInManager.IsSignedIn(principal))
        {

            <JobSearchResult job="@job" user="@principal"
    jobApplied="joApplicationService.CheckJobApplication(userManager.GetUserId(principal), job.Id)" />
        }
        else
        {
            <JobSearchResult job="@job" />
        }
    }
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IEnumerable<JobListing> jobListings = new List<JobListing>();
    private Dictionary<string, bool> verificationStatus = new Dictionary<string, bool>();

    private ClaimsPrincipal principal;
    private string SearchString;
    private bool loading = false;

    private List<String> sectors = new List<String> { "IT", "Food", "Chemical", "BioTech" };

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        principal = (await authenticationStateTask).User;
        loading = false;
    }

    private async Task SearchJobs(ChangeEventArgs args)
    {
        loading = true;
        SearchString = args.Value.ToString();

        if (!string.IsNullOrEmpty(SearchString))
        {
            jobListings = await jobListingService.SearchJobListingsAsync(SearchString);
        }
        loading = false;
    }

    private async Task SelectSectorAsync(string sector)
    {
        loading = true;
        SearchString = sector;

        if (!string.IsNullOrEmpty(SearchString))
        {
            jobListings = await jobListingService.SearchJobListingsAsync(SearchString);
        }

        loading = false;
    }
}
