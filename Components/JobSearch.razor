@inject JobListingService jobListingService
@inject JobApplicationService joApplicationService
@inject SignInManager<JobProfile> signInManager
@inject UserManager<JobProfile> userManager

@namespace JobPortal.Components

<div class="text-center">
    <h1 class="display-6 py-4">Find a perfect job for you</h1>

    <div class="input-group mb-3">
        <input class="form-control form-control-lg" list="datalistOptions" value="@SearchString" @onchange="SearchJobs"
            aria-describedby="search-button" />
        <button class="btn btn-success" type="submit" id="search-button">
            <span class="oi oi-magnifying-glass"></span>
        </button>
    </div>
</div>

<div class="my-3 text-center text-muted">
    @if (String.IsNullOrEmpty(SearchString))
    {
        <div class="mt-3 d-flex justify-content-center">
            <lottie-player src="https://assets1.lottiefiles.com/private_files/lf30_KTzaOr.json" background="transparent"
            speed="1" style="width: 300px; height: 300px;" loop autoplay>
            </lottie-player>
        </div>
    }
    else
    {
        <p>@jobListings.Count() results found</p>
    }
</div>

@if (loading)
{
    <Loader />
}
else
{
    foreach (var job in jobListings)
    {
        if (signInManager.IsSignedIn(user))
        {
            <JobSearchResult job="@job" user="@user" jobApplied="joApplicationService.CheckJobApplication(userManager.GetUserId(user), job.Id)" />
        }
        else
        {
            <JobSearchResult job="@job" />
        }
    }
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IEnumerable<JobListing> jobListings = new List<JobListing>();

    private ClaimsPrincipal user;
    private string SearchString;
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        user = (await authenticationStateTask).User;
        loading = false;
    }

    private async Task SearchJobs(ChangeEventArgs args)
    {
        loading = true;
        SearchString = args.Value.ToString();

        if (!string.IsNullOrEmpty(SearchString))
        {
            jobListings = await jobListingService.SearchJobListingsAsync(SearchString.ToLower());
        }
        loading = false;
    }
}
