<div class="dropdown">
    <a class="btn btn-light btn-sm dropdown-toggle" style="white-space: nowrap; margin-left: 1.5rem;" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
        Account
    </a>
    <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink">
        <AuthorizeView>
            <Authorized>
                <li><a class="dropdown-item btn-sm" href="Identity/Account/Manage">Manage</a></li>
                <li>
                    <form method="post" action="Identity/Account/LogOut">
                        <button class="dropdown-item btn-sm" type="submit">Log out</button>
                    </form>
                </li>
            </Authorized>
            <NotAuthorized>
                <li><a class="dropdown-item btn-sm" href="Identity/Account/Register">Register</a></li>
                <li><a class="dropdown-item btn-sm" href="Identity/Account/Login">Log in</a></li>
            </NotAuthorized>
        </AuthorizeView>
    </ul>
</div>

<AuthorizeView>
    <Authorized>
        @if (user.IsInRole("Employer"))
        {
            <a href="/employer" class="btn btn-success btn-sm top-link">Job Manager</a>
        }
        else if (user.IsInRole("Applicant"))
        {
            <a href="/applicant" class="btn btn-success btn-sm top-link">Applicant Manager</a>
        }
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        user = (await authenticationStateTask).User;
    }
}
