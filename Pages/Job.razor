@page "/job/{jobid}"

@inject UserManager<JobProfile> userManager
@inject SignInManager<JobProfile> signInManager
@inject JobListingService jobListingService
@inject JobApplicationService jobApplicationService

<div class="text-center my-5">
    <h1 class="display-6">Job Detail</h1>
</div>

<style>
    .resume {
        padding-bottom: 20em;
        display: grid;
        grid-template-rows: 250px 700px;
        grid-template-areas:
            "resume-head"
            "resume-data";
        border-style: solid;
        border-width: 3px;
        border-radius: 20px;
        padding: 20px;
    }

    .resume-head {
        grid-area: resume-head;
        padding-left: 30px;
        display: grid;
        grid-template-columns: 1fr 2fr;
    }

    .resume-data {
        grid-area: resume-data;
        display: grid;
        grid-template-columns: 1fr 1.5fr;
        grid-template-rows: 1fr 1fr 1fr;
        grid-template-areas:
            "bio education"
            "specialization experience"
            "contact projects";
    }

    table {
        table-layout: fixed;
    }

    th {
        text-align: left;
    }

    td {
        padding: 5px 20px;
    }


    .secHeading {
        color: black;
        font-weight: 600;
    }

    .tertHeading {
        color: rgb(3, 215, 255);
        font-weight: 400;
    }

    .name {
        display: flex;
        flex-direction: column;
        margin-top: 50px;
        left: 20px;
        font-size: 35px;
        color: black;
    }

    .image img {
        border-radius: 50%;
        height: 150px;
        width: 150px;
    }

    .bio {
        grid-area: bio;
        padding: 10px 15px 0 0;
    }

    .education {
        grid-area: education;
        padding-left: 10px;
        padding-top: 10px;
    }

    .specialization {
        grid-area: specialization;
        padding-left: 10px;
        padding-top: 10px;
    }

    .experience {
        grid-area: experience;
        padding-left: 10px;
        padding-top: 10px;
    }

    .contact {
        grid-area: contact;
        padding-left: 10px;
        padding-top: 10px;
    }

    .projects {
        grid-area: projects;
        padding-left: 10px;
        padding-top: 10px;
    }
</style>

@if (loading)
{
    <Loader />
}
else
{
    <div class="job">
    <div class="shadow p-3 mb-3 bg-body rounded">
        <div class="mx-auto">
            <img src="@(job.JobPicture == null ? "img/default_logo.svg" : job.JobPicture)" height="100" width="100"
                class="rounded border-1 p-2" />
        </div>
        <div class="my-5">
            <h2>
                @job.JobTitle
            </h2>
            <p>@job.JobDescription</p>
            <p class="text-muted">
                @if (verified)
                    {
                        <span class="badge bg-success mx-1">verified</span>
                    }
                    <span class="oi oi-map-marker"></span>
                    @job.JobLocation
                    <span class="oi oi-wrench mx-1"></span>
                    @job.JobSector
                </p>
            </div>
            <div class="mt-10 mx-auto">
                @if (user != null && user.IsInRole("Applicant"))
                {
                    if (jobApplied)
                    {
                        <button class="btn btn-success">
                            Applied <span class="oi oi-circle-check"></span>
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-success" @onclick="ApplyAsync">Apply Now</button>
                    }
                }

                @if (profile == null)
                {
                    <a href="/Identity/Account/Login" class="btn btn-primary btn-sm">
                        Login as an applicant
                    </a>
                }
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter]
    public string jobid { get; set; }

    private ClaimsPrincipal user;

    private JobListing job;
    private JobProfile profile;

    public bool jobApplied = false;

    private bool loading = false;

    private bool verified = false;

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        user = (await authenticationStateTask).User;
        job = await jobListingService.GetJobListingAsync(jobid);

        if (signInManager.IsSignedIn(user))
        {
            profile = await userManager.GetUserAsync(user);
            jobApplied = jobApplicationService.CheckJobApplication(profile.Id, jobid);
        }

        loading = false;
    }

    private async Task ApplyAsync()
    {
        var jobApplication = new JobApplication
        {
            Id = Guid.NewGuid().ToString(),
            JobListingId = job.Id,
            ApplicantId = profile.Id,
            ApplicantName = profile.FullName,
            ApplicantCollege = profile.Organisation,
            ApplicationDate = DateTime.UtcNow
        };

        await jobApplicationService.CreateJobApplicationAsync(jobApplication);
        jobApplied = true;
    }
}