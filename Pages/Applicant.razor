@page "/applicant"
@attribute [Authorize(Roles = "Applicant")]

@inject UserManager<JobProfile> userManager
@inject JobApplicationService jobApplicationService

<div class="text-center my-5">
    <h1 class="display-6">Your Applications</h1>
</div>

@if (loading)
{
    <Loader />
}
else
{
    <div class="row">
        <div class="col-4">
            <div class="mb-3">
                <div class="d-flex align-items-center flex-column">
                    <img src="@(user.ProfilePicture == null ? "img/user.svg" : user.ProfilePicture)"
                         height="150" width="150" class="rounded border-1 p-2" />
                    <div class="mb-3">
                        <InputFile id="file-upload" OnChange="@OnInputFileChange" />
                    </div>
                </div>
            </div>
            <div>
                <h4 class="text-muted text-center"> Education Details</h4>
                <div class="mb-3">
                    <label class="form-label">Full Name</label>
                    <input @bind="user.FullName" type="text" class="form-control" placeholder="John Doe">
                </div>
                <div class="mb-3">
                    <label class="form-label">High School</label>
                    <input @bind="user.Resume.HighSchool" type="text" class="form-control" placeholder="High School">
                </div>
                <div class="mb-3">
                    <label class="form-label">College</label>
                    <input @bind="user.Resume.College" type="text" class="form-control" placeholder="College">
                </div>
                <div class="mb-3">
                    <label class="form-label">Graduation Date</label>
                    <input @bind="user.Resume.GraduationDate" type="date" class="form-control" placeholder="Graduation Date">
                </div>
            </div>
            <div class="my-5">
                <div class="row">
                    <div class="col">
                        <h4 class="text-muted text-center">Past Experiences</h4>
                    </div>
                    <div class="col text-lg-end">
                        <button type="button" class="btn btn-sm btn-primary"
                                data-bs-toggle="modal" data-bs-target="#exampleModal">
                            <span class="oi oi-plus"></span>
                        </button>
                    </div>
                </div>

                @if (user.Resume.JobExpereinces.Any())
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Expereinces</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var expereince in user.Resume.JobExpereinces)
                            {
                                <tr>
                                    <td>@expereince.JobName</td>
                                    <td>@expereince.StartDate.ToShortDateString()</td>
                                    <td>@expereince.EndDate.ToShortDateString()</td>
                                </tr>
                            }

                        </tbody>
                    </table>
                }
                else
                {
                    <p class="text-muted my-2 m-1">
                        No past expereinces set
                    </p>
                }
            </div>

            <button class="btn btn-success" @onclick="UpdateProfile">
                Update
            </button>
            <a href="/resume/@user.Id" class="btn btn-light">
                View Resume <span class="oi oi-eye"></span>
            </a>
        </div>
        <div class="col-8">
            @if (jobApplications.Any())
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Job Name</th>
                            <th>Job Sector</th>
                            <th>Job Location</th>
                            <th>Application Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var application in jobApplications)
                        {
                            <tr>
                                <td>@application.JobListing.JobTitle</td>
                                <td>@application.JobListing.JobSector</td>
                                <td>@application.JobListing.JobLocation</td>
                                <td>@application.ApplicationDate</td>
                                <td>
                                    @if (application.ApplicationApproved)
                                    {
                                        <span class="badge bg-success">
                                            Approved <span class="oi oi-circle-check"></span>
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">
                                            Approval Pending <span class="oi oi-reload"></span>
                                        </span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <NoData />
            }
        </div>
    </div>
}

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Add Past Expereinces</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Job Name</label>
                    <input @bind="newExperience.JobName" type="text" class="form-control" placeholder="Internship">
                </div>
                <div class="mb-3">
                    <label class="form-label">Start Date</label>
                    <input @bind="newExperience.StartDate" type="date" class="form-control">
                </div>
                <div class="mb-3">
                    <label class="form-label">End Date</label>
                    <input @bind="newExperience.EndDate" type="date" class="form-control">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success" @onclick="AddJobExperience">Add Experience</button>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool loading = false;
    private string userid;
    private JobProfile user;
    private IEnumerable<JobApplication> jobApplications;

    private JobExperience newExperience = new JobExperience();

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        userid = userManager.GetUserId((await authenticationStateTask).User);
        user = await userManager.Users.Include(x => x.Resume).Include(x => x.Resume.JobExpereinces).SingleAsync(x => x.Id == userid);
        jobApplications = await jobApplicationService.FindJobApplicationsByUserIdAsync(user.Id);

        loading = false;
    }

    private async Task UpdateProfile()
    {
        await userManager.UpdateAsync(user);
    }

    private async Task AddJobExperience()
    {
        newExperience.Id = Guid.NewGuid().ToString();
        user.Resume.JobExpereinces.Add(newExperience);

        await UpdateProfile();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var imageFile = e.File;
        var resizedImageFile = await imageFile.RequestImageFileAsync(format,
               150, 150);
        var buffer = new byte[resizedImageFile.Size];

        await resizedImageFile.OpenReadStream().ReadAsync(buffer);

        user.ProfilePicture =
             $"data:{format};base64,{Convert.ToBase64String(buffer)}";

        await UpdateProfile();
    }
}
