@page "/admin"
@attribute [Authorize(Roles = "Admin")]

@inject UserManager<JobProfile> userManager

<div class="text-center my-5">
    <h1 class="display-6">Admin Manager</h1>
</div>

@if (loading)
{
    <Loader />
}
else
{
    <div>
        <div class="my-5 alert alert-info">
            <ul class="nav nav-pills">
                <li class="nav-item">
                    <a class="nav-link" href="/reports/jobs">Job listings</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link" href="/reports/applications">Job Applications</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link" href="/reports/applicants">Applicants</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link" href="/reports/employers">Employers</a>
                </li>
            </ul>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Orgnisation</th>
                    <th>Email</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employer in employers)
                {

                    <tr>
                        <td>@employer.FullName</td>
                        <td>@employer.Organisation</td>
                        <td>@employer.Email</td>
                        <td>
                            @if (employer.OrganisationVerified)
                            {
                                <button class="btn btn-danger" @onclick="(() => ApproveAsync(employer, false))">
                                    Disapprove
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick="(() => ApproveAsync(employer))">
                                    Approve
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private JobProfile user;
    private IEnumerable<JobProfile> employers;

    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        user = await userManager.GetUserAsync((await authenticationStateTask).User);
        employers = await userManager.GetUsersInRoleAsync("Employer");

        loading = false;
    }


    private async Task ApproveAsync(JobProfile employer, bool status = true)
    {
        employer.OrganisationVerified = status;
        await userManager.UpdateAsync(employer);
    }
}